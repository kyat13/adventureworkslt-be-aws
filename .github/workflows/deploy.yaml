name: 'Deploy to Lambda Function'

#description: "Build & Deploy SAM application"
#inputs:
#  aws-access-key:
#    required: true
#    description: "AWS Access Key"
#  aws-secret-key:
#    required: true
#    description: "AWS Secret Key"
#  aws-region:
#    required: true
#    description: "AWS Region"
#  template-file-path:
#    required: true
#    description: "Path to the SAM template file"
#  stack-name:
#    required: true
#    description: "The name of the CloudFormation stack to deploy"
##  s3-bucket-name:
##    required: true
##    description: "The name of the S3 bucket to store SAM artefacts"
#  security-group-id:
#    required: true
#    description: "The ID of the security group to use"
#  subnet-1-id:
#    required: true
#    description: "The ID of the first subnet to use"
#  subnet-2-id:
#    required: true
#    description: "The ID of the second subnet to use"
#  secret-name:
#    required: true
#    description: "The name of the secret holding the database credentials"

#on: [push]
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Repo Tag Name (Ex.: yyyymmdd-hhmmss)'
        type: string
        required: true
      aws-access-key:
        required: true
        description: "AWS Access Key"
        aws-secret-key:
          required: true
          description: "AWS Secret Key"
        aws-region:
          required: true
          description: "AWS Region"
        template-file-path:
          required: true
          description: "Path to the SAM template file"
        stack-name:
          required: true
          description: "The name of the CloudFormation stack to deploy"
        #  s3-bucket-name:
        #    required: true
        #    description: "The name of the S3 bucket to store SAM artefacts"
        security-group-id:
          required: true
          description: "The ID of the security group to use"
        subnet-1-id:
          required: true
          description: "The ID of the first subnet to use"
        subnet-2-id:
          required: true
          description: "The ID of the second subnet to use"
        secret-name:
          required: true
          description: "The name of the secret holding the database credentials"

jobs:
  Deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/github-script@v6
        name: 'Check Git Tag'
        with:
          script: |
            const refResponse = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/0.0.2-20230821-102220'
            });
#ref: 'tags/${{ inputs.version }}'
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_LAMBDA_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_LAMBDA_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_LAMBDA_REGION }}

      - name: 'Check S3 Bucket'
        run: |
          aws s3api wait object-exists \
            --bucket ${{ secrets.AWS_S3_BUCKET_NAME }} \
            --key ${{ inputs.version }}.zip \
            --cli-read-timeout 60 \
            --cli-connect-timeout 60

      - name: 'Update Source Code'
        run: |
          echo "Deploy Version: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Update Lambda Function with ${{ inputs.version }}.zip file" >> $GITHUB_STEP_SUMMARY
          aws lambda update-function-code \
            --function-name=${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} \
            --s3-bucket=${{ secrets.AWS_S3_BUCKET_NAME }} \
            --s3-key=${{ inputs.version }}.zip \
            --cli-read-timeout 60 \
            --cli-connect-timeout 60

      - run: sam build -t ${{ inputs.template-file-path }}
        shell: bash
      - run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name adventureworkslt --s3-prefix ${{inputs.stack-name}} --s3-bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --capabilities CAPABILITY_IAM --parameter-overrides ParameterKey=SecurityGroupId,ParameterValue=${{ inputs.security-group-id }} ParameterKey=Subnet1Id,ParameterValue=${{ inputs.subnet-1-id }} ParameterKey=Subnet2Id,ParameterValue=${{ inputs.subnet-2-id }} ParameterKey=DatabaseSecretName,ParameterValue=${{ inputs.secret-name }}
        shell: bash